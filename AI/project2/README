Objectives
1) Collect and manage a dataset used to train and test a neural network.
2) Define and use PyTorch DataLoaders to manage a PyTorch Datasets.
3) Design your own neural network architecture in PyTorch.
4) Evaluate and improve a neural network model and verify an application in simulation.

Technology Requirements
1) System designed for use with Ubuntu 18.04
2) Python and its related libraries. Using Anaconda is recommended.
3) Python libraries: cython matplotlib sklearn scipy pymunk pygame pillow numpy noise torch

The first task is to collect data that can be used to train the model. Collect a single sample per
action containing, in order, the 5 distance sensor readings, the action, and whether or not a
collision occurred (0: no collision, 1: collision). This data should be saved as a .csv file with 7
untitled columns. The robot should wander around with no regard for its environment or avoiding collisions.

Now that you have collected your training data, you can package it into an iterable PyTorch
DataLoader for ease of use. You may be required to prune your collected data to balance out
their distribution. If your dataset is 99% 0s and 1% 1s, a model that outputs only 0 would
achieve good loss, but it would not have learned anything useful

Next you will be designing your own custom neural network using PyTorchâ€™s torch.nn
class. You will need to initialize a custom architecture, define a forward pass through the
network, and build a method for evaluating the fit of a given model.

you must train a model using your custom network architecture, which accurately
predicts collisions given sensor and action information

